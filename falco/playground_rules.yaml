#
# Here, I'm modifying the health_endpoints which is used for the "Anonymous Request Allowed"
# rule, required for CIS Benchmark 1.1.1.
# By default, Falco sets the endpoint to 'healthz' only which causes to many events for
# this playground
- macro: health_endpoint
  condition: ka.uri=/healthz or ka.uri=/readyz or ka.uri=/livez

# 
# Creates a macro outbound_corp that deals with any outbound connection
# Creates a list k8s_not_monitored with values blue and green
# Creates a rule that verifies:
# - If it’s an outbound traffic defined in macro outbound_corp
# - AND If the field k8s.ns.name is defined (which means it’s being executed
#   inside Kubernetes)
# - AND if the namespace containing the Pod does not have a label network
#   containing any of the values in list k8s_not_monitored. If it does, the
#   traffic wont be monitored
# Whitelist a namespace by:
# kubectl label ns falco --overwrite network=green (or blue)
# - macro: outbound_corp
#   condition: >
#     (((evt.type = connect and evt.dir=<) or
#       (evt.type in (sendto,sendmsg) and evt.dir=< and
#        fd.l4proto != tcp and fd.connected=false and fd.name_changed=true)) and
#      (fd.typechar = 4 or fd.typechar = 6) and
#      (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8") and
#      (evt.rawres >= 0 or evt.res = EINPROGRESS))

# - list: k8s_not_monitored
#   items: ['"green"', '"blue"']

# - rule: (PG-NET) Kubernetes Outbound Connection
#   desc: A pod in namespace attempted to connect to the outer world
#   condition: outbound_corp and k8s.ns.name != "" and not k8s.ns.label.network in (k8s_not_monitored)
#   output: "Outbound network traffic connection from a Pod: (pod=%k8s.pod.name namespace=%k8s.ns.name srcip=%fd.cip dstip=%fd.sip dstport=%fd.sport proto=%fd.l4proto procname=%proc.name)"
#   priority: WARNING

#
# To easily run kshell, you can set an alias to
# alias kshell='kubectl run -it --image=ubuntu kshell --restart=Never --labels=kshell=true --rm -- /bin/bash'
# kshell will spawn an ubuntu based bash in the current namespace
# apt update is allowed in this container!
- list: app_kshell_label
  items: ['"kshell:true"']
  
- macro: app_kshell
  condition: >
    k8s.pod.name contains "kshell" 
    and container.image contains "ubuntu"
    and k8s.pod.labels in (app_kshell_label)

- rule: (PG-KSHELL) Process started in kshell container
  desc: Detect a process started in kshell container
  condition: >
    spawned_process
    and app_kshell
  output: Process spawned in kshell container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: DEBUG

- rule: (PG-KSHELL) File or directory created in kshell container
  desc: Detect a file or directory created in kshell container
  condition: >
    ((evt.type = chmod or evt.type = fchmod)
    or mkdir)
    and app_kshell
  output: File or directory created in kshell container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
  priority: DEBUG

#
# We create an event, if someone runs an information gathering tool within a container
- list: information_gathering_tools
  items:
    [
      whoami,
      nmap,
      racoon,
    ]

- rule: (PG-IG) Information gathering detected
  desc: An information gathering tool is run in a Container
  condition: evt.type = execve and evt.dir=< and container.id != host and proc.name in (information_gathering_tools)
  output: "Information gathering tool run in container (user=%user.name %container.info parent=%proc.pname cmdline=%proc.cmdline)"
  priority: WARNING

#
# Disable default rule
- rule: Terminal shell in container
  desc: A shell was used as the entrypoint/exec point into a container with an attached terminal.
  condition: >
    spawned_process and container
    and shell_procs and proc.tty != 0
    and container_entrypoint
    and not user_expected_terminal_shell_in_container_conditions
  output: >
    A shell was spawned in a container with an attached terminal (user=%user.name user_loginuid=%user.loginuid %container.info
    shell=%proc.name parent=%proc.pname cmdline=%proc.cmdline terminal=%proc.tty container_id=%container.id image=%container.image.repository)
  priority: NOTICE
  tags: [container, shell, mitre_execution]
  enabled: false

#
# Disable default rule
- rule: Attach/Exec Pod
  desc: >
    Detect any attempt to attach/exec to a pod
  condition: kevt_started and pod_subresource and kcreate and ka.target.subresource in (exec,attach) and not user_known_exec_pod_activities
  output: Attach/Exec to pod (user=%ka.user.name pod=%ka.target.name ns=%ka.target.namespace action=%ka.target.subresource command=%ka.uri.param[command])
  priority: NOTICE
  source: k8s_audit
  tags: [k8s]
  enabled: false

#
# Detect attach/exec with terminal shell as root or user
- macro: is_user_shell
  condition: (proc.vpid!=1 and user.uid!=0)

- macro: is_root_shell
  condition: (proc.vpid!=1 and user.uid=0)

- rule: (PG-SHELL) Attach/Exec Pod with Terminal User shell in container
  desc: A shell was created inside an unprivileged container with an attached terminal.
  condition: >
    spawned_process and container
    and shell_procs and proc.tty != 0
    and is_user_shell
  output: >
    A shell was spawned in a container with an attached terminal (user=%user.name user_loginuid=%user.loginuid %container.info
    shell=%proc.name parent=%proc.pname cmdline=%proc.cmdline terminal=%proc.tty container_id=%container.id image=%container.image.repository)
  priority: WARNING
  tags: [container, shell, mitre_execution]
  enabled: true

- rule: (PG-SHELL) Attach/Exec Pod with Terminal Root shell in container
  desc: A shell was created inside a container which runs as root user with an attached terminal.
  condition: >
    spawned_process and container
    and shell_procs and proc.tty != 0
    and is_root_shell
  output: >
    A shell with root privileges was spawned in a container running as root with an attached terminal (user=%user.name user_loginuid=%user.loginuid %container.info
    shell=%proc.name parent=%proc.pname cmdline=%proc.cmdline terminal=%proc.tty container_id=%container.id image=%container.image.repository)
  priority: WARNING
  tags: [container, shell, mitre_execution]
  enabled: true

#
# Detect container run as root user
- macro: is_root_startup
  condition: (proc.vpid=1 and user.uid=0)

- rule: (PG-ROOT) Container Run as Root User
  desc: Detected container running as root user
  condition: >
    spawned_process and container
    and is_root_startup
    and not user_known_run_as_root_container
  output: Container launched with root user privilege (uid=%user.uid container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
  priority: WARNING
  tags: [container, process]
  enabled: true

# 
# Integrity Monitoring in Container
# Since the playground normally runs within kind we're not monitoring for
# integrity events created by the kind node containers themselves
- macro: is_kind
  condition: container.image startswith "kindest/node:"

- rule: (PG-IMC) Detect New File
  desc: Detect new file created
  condition: >
    (evt.type = chmod or evt.type = fchmod)
    and container
    and not is_kind
  output: >
    File below a known directory opened for writing (user=%user.name
    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] image=%container.image)
  priority: ERROR
  tags: [filesystem]

# This rule is pretty noisy. I'm pretty sure that this is because of the kubernetes audit logging
# - rule: (PG-IMC) Detect New Directory
#   desc: Detect new directory created
#   condition: >
#     mkdir
#     and container
#     and not is_kind
#   output: >
#     Directory created (user=%user.name
#     command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] image=%container.image)
#   priority: ERROR
#   tags: [filesystem]

- rule: (PG-IMC) Detect File Permission or Ownership Change
  desc: Detect file permission/ownership change
  condition: >
    spawned_process
    and proc.name in (chmod, chown) and proc.args contains "/tmp/"
    and container
    and not is_kind
  output: >
    File below a known directory has permission or ownership change (user=%user.name
    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] image=%container.image)
  priority: WARNING
  tags: [filesystem]

- rule: (PG-IMC) Detect Directory Change
  desc: Detect directories change
  condition: >
    spawned_process 
    and proc.name in (mkdir, rmdir, mvdir, mv)
    and container
    and not is_kind
  output: >
    Directory Change in Filesystem (user=%user.name
    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] image=%container.image)
  priority: WARNING
  tags: [filesystem]

# 
# Integrity Monitoring on Host & Container
- rule: (PG-IM) Kernel Module Modification
  desc: detect kernel module change
  condition: >
    spawned_process and proc.name in (insmod, modprobe)
  output: >
    Kernel Module Change (user=%user.name
    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
  priority: WARNING
  tags: [process]

- rule: (PG-IM) Node Created in Filesystem
  desc: detect node created in filesystem
  condition: >
    spawned_process and proc.name = mknod
  output: >
    Node Creation in Filesystem (user=%user.name
    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
  priority: WARNING
  tags: [filesystem]

- rule: (PG-IM) Listen on New Port
  desc: Detection a new port is listening
  condition:
    evt.type = listen 
  output: >
    A new port is open to listen (port=%fd.sport ip=%fd.sip)
  priority: WARNING
  tags: [network]

#
# Admin Activities
- rule: (PG-ADM) Detect su or sudo
  desc: Detect sudo activities
  condition:
    spawned_process and proc.name in (sudo, su)
  output: >
    Detected sudo or su privilege escalation activity (user=%user.name command=%proc.cmdline)
  priority: WARNING
  tags: [process]

- rule: (PG-ADM) Package Management Launched
  desc: Detect package management launched
  condition: >
    spawned_process and user.name != "_apt" and package_mgmt_procs and not package_mgmt_ancestor_procs
  output: >
    Package management process launched in container (user=%user.name
    command=%proc.cmdline container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
  priority: ERROR
  tags: [process]

#
# SSH Connections
- rule: (PG-SSH) Inbound SSH Connection
  desc: Detect Inbound SSH Connection
  condition: >
    ((evt.type in (accept,listen) and evt.dir=<) or
      (evt.type in (recvfrom,recvmsg))) and ssh_port
  output: >
    Inbound SSH connection detected (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)
  priority: WARNING
  tags: [network]

- rule: (PG-SSH) Outbound SSH Connection
  desc: Detect Outbound SSH Connection
  condition: >
    ((evt.type = connect and evt.dir=<) or
      (evt.type in (sendto,sendmsg))) and ssh_port
  output: >
    Outbound SSH connection detected (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
  priority: WARNING
  tags: [network]

#
# kubectl
- macro: safe_kubectl_version
  condition: (jevt.value[/userAgent] startswith "kubectl/v1.19" or
              jevt.value[/userAgent] startswith "kubectl/v1.18" or
              jevt.value[/userAgent] startswith "kubectl/v1.17" or
              jevt.value[/userAgent] startswith "kubectl/v1.16" or
              jevt.value[/userAgent] startswith "kubectl/v1.15" or
              jevt.value[/userAgent] startswith "kubectl/v1.14.3" or
              jevt.value[/userAgent] startswith "kubectl/v1.14.2" or
              jevt.value[/userAgent] startswith "kubectl/v1.13.7" or
              jevt.value[/userAgent] startswith "kubectl/v1.13.6" or
              jevt.value[/userAgent] startswith "kubectl/v1.12.9")

# CVE-2019-11246
# Run kubectl version --client and if it does not say client version 1.12.9, 1.13.6, or 1.14.2 or newer,  you are running a vulnerable version.
- rule: (PG-KUBECTL) K8s Vulnerable Kubectl Copy
  desc: Detect any attempt vulnerable kubectl copy in pod
  condition: kevt_started and pod_subresource and kcreate and
             ka.target.subresource = "exec" and ka.uri.param[command] = "tar" and
             not safe_kubectl_version
  output: Vulnerable kubectl copy detected (user=%ka.user.name pod=%ka.target.name ns=%ka.target.namespace action=%ka.target.subresource command=%ka.uri.param[command] userAgent=%jevt.value[/userAgent])
  priority: WARNING
  source: k8s_audit
  tags: [k8s]

# THIS IS FOR POTENTIAL ADDITIONAL RULES, WHICH IGNORE A LIST OF NAMESPACES
- list: ignored_namespace
  items:
    - registry
    - prometheus
    - falco
    - smartcheck
    - container_security
    - trivy
    - starboard
    - opa
    - kube-system
    - gatekeeper-system
    - cadvisor
